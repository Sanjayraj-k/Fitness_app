import os
import logging
from flask import Flask, request, jsonify
import numpy as np
import matplotlib.pyplot as plt
from werkzeug.utils import secure_filename

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# Flask app setup
app = Flask(__name__)

# Directory for temporary image storage
TEMP_DIR = "temp_images_flask"
if not os.path.exists(TEMP_DIR):
    os.makedirs(TEMP_DIR)

# Simulated transformation analysis function with visualization
def perform_transformation_analysis(before_path, after_path):
    # Placeholder for actual image analysis logic
    # For demo purposes, generate a dummy score and visualize it
    score = np.float32(20.86)  # Example score as float32 to replicate your issue
    
    # Generate a simple plot to visualize the transformation score
    plt.figure(figsize=(6, 4))
    plt.bar(['Transformation Score'], [score], color='blue')
    plt.title('Transformation Analysis Result')
    plt.ylabel('Score (%)')
    plt.ylim(0, 100)
    
    # Save the plot to a file (per matplotlib guidelines, no plt.show())
    plot_path = os.path.join(TEMP_DIR, f"score_plot_{os.path.basename(before_path).split('.')[0]}.png")
    plt.savefig(plot_path)
    plt.close()  # Close the figure to free memory
    
    return score, plot_path

# Route to analyze images
@app.route('/analyze', methods=['POST'])
def analyze_images_route():
    try:
        # Check if files are in the request
        if 'before' not in request.files or 'after' not in request.files:
            return jsonify({"error": "Before and after images are required"}), 400

        before_file = request.files['before']
        after_file = request.files['after']

        # Generate unique ID for this request
        import uuid
        request_id = str(uuid.uuid4())

        # Securely save the uploaded files
        before_filename = secure_filename(f"before_{request_id}.jpg")
        after_filename = secure_filename(f"after_{request_id}.jpg")

        before_path = os.path.join(TEMP_DIR, before_filename)
        after_path = os.path.join(TEMP_DIR, after_filename)

        before_file.save(before_path)
        after_file.save(after_path)

        # Perform transformation analysis
        score, plot_path = perform_transformation_analysis(before_path, after_path)
        logger.info(f"Transformation analysis complete. Score: {score}%")

        # Convert numpy float32 to Python float for JSON serialization
        if isinstance(score, np.floating):
            score = float(score)

        # Prepare response
        result = {
            "score": score,
            "message": "Analysis completed successfully",
            "plot_path": plot_path  # Include the path to the generated plot
        }

        return jsonify(result)

    except Exception as e:
        logger.error(f"Error in /analyze: {str(e)}")
        return jsonify({"error": str(e)}), 500

    finally:
        # Clean up temporary files
        for path in [before_path, after_path]:
            if os.path.exists(path):
                try:
                    os.remove(path)
                    logger.debug(f"Removed temporary file: {path}")
                except Exception as e:
                    logger.error(f"Failed to remove temporary file {path}: {str(e)}")

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0')